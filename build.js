import { get } from "node:https";
import { mkdirSync, writeFileSync, readdirSync, readFileSync, copyFileSync } from "node:fs";
import { renderFile } from "ejs";
import { setFailed } from "@actions/core"; // required to be able to fail correctly
import { minify } from "html-minifier";
import { minify as _minify } from "uglify-js";
import CleanCSS from "clean-css";

const minifyOptions = {
	collapseWhitespace: true,
	includeAutoGeneratedTags: true,
	minifyCSS: true,
	minifyJS: true,
	minifyURLs: true,
	removeAttributeQuotes: true,
	removeComments: true,
	removeRedundantAttributes: true,
	sortAttributes: true,
	sortClassName: true,
	useShortDoctype: true,
};

const getUrl = async (url) => {
	return new Promise((resolve, reject) => {
		get(url, (res) => {
			let body = "";
			res.on("data", (chunk) => {
				body += chunk;
			});

			res.on("end", () => {
				try {
					const result = JSON.parse(body);
					resolve(result);
				} catch (error) {
					setFailed(error.message);
					reject(error.message);
				}
			});
		});
	});
};

async function build()  {
	// get products and updated products
	const products = await getUrl("https://susbolaget.emrik.org/v1/products");
	const updatedProducts = await getUrl(
		"https://susbolaget.emrik.org/v1/products/updated",
	);

	// create folder public
	try {
		mkdirSync("public");
	} catch (err) {
		if (err.code !== "EEXIST") throw err;
	}

	//generate sitemap.xml from products
	const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://alkoinfo.emrik.org/</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>${products
		.map(
			(product) => `<url>
    <loc>https://alkoinfo.emrik.org/product/${product.productNumber}</loc>
    <lastmod>${new Date(product.changedDate).toISOString()}</lastmod>
  </url>`,
		)
		.join("")}
</urlset>`;
	writeFileSync("public/sitemap.xml", sitemap);

	// <changefreq>daily</changefreq>
	// <priority>0.8</priority>

	const updated = products
		.filter((product) =>
			updatedProducts.map((p) => p.id).includes(product.productNumber),
		)
		.map((product) => {
			const reason = updatedProducts.find(
				(p) => p.id === product.productNumber,
			)?.reason;
			if (reason) {
				return { ...product, reason };
			}
			return product;
		});

	// sort by changedDate
	updated.sort((a, b) => new Date(b.changedDate) - new Date(a.changedDate));

	renderFile("./views/index.ejs", { updated: updated }, (err, str) => {
		if (err) {
			setFailed(err.message);
		} else {
			writeFileSync("source/index.html", minify(str, minifyOptions));
		}
	});

	// copy all files except files in don't copy
	const dontCopy = [
		"node_modules",
		"package.json",
		"package-lock.json",
		"README.md",
	];

	const folder = "./source";
	const files = readdirSync(folder);
	for (const file of files) {
		if (
			dontCopy.includes(file) ||
			file.startsWith("_") ||
			file.startsWith(".") ||
			file.endsWith(".ejs")
		)
			continue;
		if (file.endsWith(".html")) {
			const minimized = minify(readFileSync(`${folder}/${file}`, "utf8"), minifyOptions);
			writeFileSync(`public/${file}`, minimized);
		} else if (file.endsWith(".css")) {
			const minimized = new CleanCSS({
				level: 2,
			}).minify(readFileSync(`${folder}/${file}`, "utf8")).styles;
			writeFileSync(`public/${file}`, minimized);
		} else if (file.endsWith(".js")) {
			const minimized = _minify(readFileSync(`${folder}/${file}`, "utf8")).code;
			writeFileSync(`public/${file}`, minimized);
		} else {
			copyFileSync(`${folder}/${file}`, `public/${file}`);
		}
	}
};

export default build;